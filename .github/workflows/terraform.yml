name: Terraform Automation

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install pyyaml

    - name: Check environment variables
      run: |
        if [ -z "$OKTA_API_TOKEN" ]; then
          echo "OKTA_API_TOKEN is not set"
          exit 1
        fi
      env:
        OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}

    - name: Parse YAML and generate Terraform configuration
      run: |
        python .github/workflows/generate_tf.py
      env:
        OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}

    - name: Display generated Terraform configuration
      run: cat .github/workflows/main.tf

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Initialize Terraform
      run: |
        cd .github/workflows
        terraform init -input=false -no-color

    - name: Terraform Plan
      run: |
        cd .github/workflows
        terraform plan -input=false -no-color

    - name: Apply Terraform
      run: |
        cd .github/workflows
        echo "## Terraform Apply Results" >> $GITHUB_STEP_SUMMARY
        terraform apply -auto-approve -input=false -no-color 2>&1 | tee terraform_apply.log
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat terraform_apply.log >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload Terraform logs
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: terraform-logs
        path: .github/workflows/terraform_apply.log

    - name: Clean up
      if: always()
      run: |
        rm -f .github/workflows/main.tf
        rm -f .github/workflows/terraform_apply.log